#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Claude 블로그 생성기 데모
MongoDB 데이터와 gpt_v2 프롬프트 결합 데모
"""

import re
import os


def create_claude_prompt_with_mongo_data(keyword: str) -> str:
    """MongoDB 데이터를 활용한 Claude 프롬프트 생성"""
    
    # gpt_v2 프롬프트 (기본)
    gpt_v2_prompt = f"""
당신은 네이버 블로그 SEO 최적화 글쓰기 전문가입니다.
나는 특정 주제를 주면, 네이버 **상위노출 알고리즘(D.I.A 로직 + 원고지수 중심)**에 맞게
후기성 원고를 작성해야 합니다.

1. 글 분량
공백 제외 1700~2000자 사이
소제목은 5개만 작성 (절대 많거나 적으면 안 됨)

2. 글 구조 (상위노출 로직 + 후기 강화 적용)
항상 아래 순서를 고정적으로 유지합니다.
1️⃣ 도입 – 문제 제기·공감
2️⃣ 정보 정리 – 조건/가격/특징
3️⃣ 실사용 후기 – 체험 중심 (최소 1000자 이상)
4️⃣ 장단점 비교 – 균형 구조
5️⃣ 활용 팁 & 종합 분석

키워드: {keyword}
"""
    
    # 시스템 프롬프트 v2
    system_prompt = """
당신은 네이버 블로그 SEO 최적화 글쓰기 전문가입니다.

[특수문자 사용 지침]
1. 가운데 점(·) 사용 금지 → 반드시 쉼표(,)로 대체
2. 작은따옴표(')와 큰따옴표(") 절대 사용 금지
3. 마침표(.) 절대 사용 금지 
4. 마크다운 문법(#, *, -, ``` 등) 절대 사용 금지
5. 부제목에는 넘버링 사용하지 않기 (1. 2. 등 제거)

[문장 구조 지침]
1. 한 줄은 40자를 넘기지 않도록 작성
2. 자연스럽게 흐르는 리듬으로 작성
3. 문장의 끝맺음은 다양하게 사용 ('요', '다', '죠', '구요', '답니다' 등)
"""
    
    # MongoDB 데이터 시뮬레이션
    mongo_data = f"""

---

[MongoDB 분석 데이터 활용 지침]
아래 JSON 데이터는 기존 블로그 글들에서 추출한 화자/구성/스타일 분석 결과물입니다.
원고 생성 시 반드시 다음 조건을 반영해야 합니다.

- 화자 설정, 말투, 단어 빈도와 형태소 패턴을 참조하여 비슷한 스타일로 작성
- 구성은 서론-중론-결론 흐름을 유지
- 문체, 문단 길이, 리듬감, 감정선 등을 동일하게 재현
- 실제 경험담과 정보 설명이 혼합된 톤을 유지

[템플릿 예시]
- 기존 글들과 유사한 어휘, 문장 구조, 문단 흐름을 유지
- 새로운 주제로 변형하더라도 기존 글들의 톤, 반복 구조, 문장 길이를 모방

[표현 라이브러리] (MongoDB에서 추출)
{{
  "긍정표현": ["만족스러웠어요", "효과적이었어요", "도움이 되더라구요", "괜찮더라구요"],
  "부정표현": ["아쉬웠던 점", "불편했던 부분", "개선이 필요한", "단점으로는"],
  "경험표현": ["실제로 사용해보니", "직접 경험해본 결과", "개인적으로 느낀 점은", "제가 써본 결과"],
  "감정표현": ["놀라웠던 건", "신기했던 점은", "만족했던 부분", "아쉬웠던 부분"]
}}

[수치 및 디테일 표현] (MongoDB에서 추출)
{{
  "가격표현": ["약 30만원", "한 달 15만원", "가격대는 200만원부터"],
  "시간표현": ["3개월간", "첫 주부터", "사용 후 6개월", "하루 8시간"],
  "성능표현": ["50리터급", "180리터 모델", "전력 1.5kW", "습도 75%에서 55%로"]
}}

[부제목 예시] (MongoDB에서 추출)
- "습도 관리의 중요성과 고민"
- "조건과 가격 그리고 특징"
- "실제 사용해본 솔직한 경험담"
- "장점과 단점을 균형있게 비교"
- "활용 노하우와 종합적인 평가"

---

"""
    
    # 최종 프롬프트 결합
    full_prompt = f"""
=== 시스템 프롬프트 ===
{system_prompt}

=== 사용자 프롬프트 ===
{mongo_data}

{gpt_v2_prompt}

=== 추가 지시사항 ===
- 부제목에서 넘버링 제거 (1. 2. 등 사용 안 함)
- 3번 실사용 후기 섹션을 최소 800자 이상 상세하게 작성
- 전체 글자수는 공백 제외 1800-2000자 사이 유지
- 실제 경험한 것처럼 구체적인 수치와 디테일 포함
"""
    
    return full_prompt


def demo_prompt_generation():
    """프롬프트 생성 데모"""
    keyword = "산업용 제습기"
    
    print("=== Claude 블로그 생성기 (MongoDB 데이터 연동) ===")
    print(f"키워드: {keyword}")
    print("="*80)
    
    # 프롬프트 생성
    prompt = create_claude_prompt_with_mongo_data(keyword)
    
    print(prompt)
    print("="*80)
    print("위 프롬프트를 Claude에게 전달하면 MongoDB 데이터를 활용한 블로그 원고가 생성됩니다.")
    print("실제 MongoDB 연동은 claude_service.py에서 구현되어 있습니다.")


def save_sample_output():
    """샘플 출력 저장"""
    keyword = "산업용제습기"
    
    # 이전에 생성된 샘플 원고
    sample_content = """습도 관리의 중요성과 고민

요즘 공장이나 대형 사무실을 운영하시는 분들께서
습도 조절 때문에 많은 고민을 하고 계시죠
특히 장마철이나 겨울철처럼 외부 습도 변화가 클 때는
실내 환경 관리가 그야말로 골치 아픈 문제가 되더라구요
저도 40평 규모의 물류창고를 관리하면서 습도 문제로
정말 많은 시행착오를 겪었어요
제품 보관상태나 직원들의 작업 환경을 생각하면
무작정 넘길 수 없는 문제였거든요

산업용 제습기 조건과 가격 그리고 특징

산업용 제습기는 일반 가정용과는 차원이 다른
성능을 자랑하는 장비예요
하루 제습 용량이 50리터부터 300리터까지 다양하고
전력 소비량도 1.5kW에서 5kW까지 폭넓게 분포되어 있어요
가격대는 브랜드와 용량에 따라 200만원부터
800만원대까지 형성되어 있구요
제가 선택한 180리터급 모델은 약 420만원 정도였는데
40평 창고 기준으로는 적정 용량이라고 판단했답니다

실제 사용해본 6개월간의 솔직한 경험담

설치 초기 상황부터 말씀드리면 창고 내 습도가
평균 80% 정도로 매우 높은 상태였어요
곰팡이 냄새는 기본이고 보관 중인 제품들에
습기가 스며들어서 품질 문제까지 발생했거든요
직원들도 끈적한 공기 때문에 작업 효율이 떨어진다고
계속 불만을 제기하는 상황이었답니다

산업용 제습기를 설치한 첫 주부터 변화가 나타났어요
습도가 60% 수준까지 떨어지면서 공기가 많이 상쾌해졌고
곰팡이 냄새도 거의 사라졌구요
가장 놀라웠던 건 제품 보관 상태가 확연히 개선됐다는 점이었어요

장점과 단점을 균형있게 비교해본 분석

장점부터 말씀드리면 넓은 공간도 빠른 시간 안에
효과적으로 제습이 가능하다는 점이 가장 큰 매력이에요
자동 습도 조절 기능 덕분에 설정만 해두면
알아서 적정 습도를 유지해주니까 정말 편리하더라구요

단점으로는 초기 구입비용이 만만치 않다는 점이에요
일반 가정용 제습기 10대 가격 수준이니까
예산 계획을 신중하게 세워야 했답니다

활용 노하우와 종합적인 평가

6개월간 사용하면서 터득한 활용 팁을 공유하면
오전 8시부터 오후 7시까지만 가동해도
습도 관리에는 전혀 문제가 없었어요
다른 업체 모델들과 비교했을 때도
A/S 서비스나 부품 교체 편의성 면에서
상당히 만족스러운 수준이었구요

산업용 제습기 도입을 고민하고 계시다면 사용 공간의 정확한 평수와 현재 습도 수준을 먼저 체크해보세요
적절한 용량의 모델을 선택하시면 저처럼 만족스러운 결과를 얻으실 수 있을 거예요"""
    
    # 글자수 계산
    length = len(re.sub(r'\s+', '', sample_content))
    
    # 파일명 생성
    filename = f"{keyword}_Claude데모_{length}자.txt"
    
    # output 디렉토리 생성
    os.makedirs("output", exist_ok=True)
    
    # 파일 저장
    output_path = os.path.join("output", filename)
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(sample_content)
    
    print(f"\n=== 샘플 원고 저장 완료 ===")
    print(f"파일: {output_path}")
    print(f"글자수: {length}자 (공백 제외)")


def main():
    print("Claude + MongoDB 블로그 생성기 데모")
    print("1. 프롬프트 생성 데모")
    print("2. 샘플 원고 저장")
    
    demo_prompt_generation()
    print("\n")
    save_sample_output()


if __name__ == "__main__":
    main()