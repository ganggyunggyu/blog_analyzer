from __future__ import annotations
import re

from openai import OpenAI
import time
from _prompts.get_kkk_prompts import KkkPrompt
from config import OPENAI_API_KEY
from _constants.Model import Model
from utils.format_paragraphs import format_paragraphs
from utils.query_parser import parse_query
from utils.text_cleaner import clean_multiple_spaces, clean_text_format


model_name: str = Model.GPT5

client = OpenAI(api_key=OPENAI_API_KEY)


def chunk_gen(user_instructions: str, ref: str = "", category: str = "") -> str:
    """
    Returns:
        생성된 원고 텍스트 (str)

    Raises:
        RuntimeError: 모델이 빈 응답을 반환한 경우 등
        ValueError: API 키 미설정 등의 환경 이슈
        Exception: OpenAI 호출 실패 등 기타 예외
    """

    if not OPENAI_API_KEY:
        raise ValueError("OPENAI_API_KEY가 설정되어 있지 않습니다. .env를 확인하세요.")

    # 디버그 출력 제거
    parsed = parse_query(user_instructions)

    sys = KkkPrompt.get_kkk_system_prompt_v2()

    if not parsed["keyword"]:
        raise ValueError("키워드가 없습니다.")

    keyword = parsed["keyword"]

    user: str = (
        f"""

[개요]

{keyword}

## **📌 네이버 D.I.A.+ 최적화 텍스트 리라이팅 전문 프롬프트**

**당신은 네이버 D.I.A.+ 시스템을 완벽히 이해하고, 원본 의미를 100% 보존하면서 자연스럽게 리라이팅하는 SEO 전문가입니다.**

---

### **🎯 [핵심 미션: 의미 보존 + 표현 변환 + D.I.A.+ 최적화]**

원본 텍스트의 핵심 정보와 스토리라인은 완벽히 유지하면서, 네이버가 중복 콘텐츠로 인식하지 않도록 자연스럽게 변환합니다.

---

## **[STEP 1: 원본 분석 및 키워드 추출]** 🔍

### **1-1. 원본 구조 파악**
```
필수 분석 항목:
□ 전체 문단 수와 구성
□ 핵심 주제와 논점
□ 반복되는 핵심 키워드
□ 인물/장소/시간 정보
□ 구체적 수치와 데이터
□ 스토리 전개 순서
```

### **1-2. 보존할 핵심 요소 체크**
```
절대 변경 금지:
✅ 구체적 수치 (3년, 100만원 등)
✅ 법률/규정 용어
✅ 시간적 순서
✅ 인과관계
✅ 핵심 메시지
```

---

## **[STEP 2: 자연스러운 표현 치환 시스템]** 📊

### **2-1. 단어 치환 레이어**

#### **Layer 1: 동사 변환 (자연스러운 어미 변화)**
```
기본 패턴:
~했습니다 ↔ ~했죠/했어요
~합니다 ↔ ~해요/하죠
진술했다 → 주장했다/언급했다/말했다
발언했다 → 조언했다/강조했다/설명했다
확인했다 → 파악했다/분석했다/검토했다
지적했다 → 언급했다/강조했다/밝혔다
```

#### **Layer 2: 명사 치환 (의미 유지)**
```
핵심 명사:
방법/방식 → 방안/수단/절차
규율/규정 → 법도/원칙/기준
처지/상황 → 입장/형편/상태
갈등/대립 → 충돌/마찰/분쟁
협조/협력 → 지원/보탬/도움
조사/수사 → 확인/검토/파악
증거/근거 → 자료/증빙/단서
```

#### **Layer 3: 형용사/부사 변환**
```
수식어 변환:
확실한 → 명확한/분명한/뚜렷한
어려운 → 힘든/까다로운/복잡한
적절한 → 알맞은/적합한/타당한
과도한 → 지나친/무리한/과한
지속적인 → 계속적인/연속적인/꾸준한
점차 → 서서히/차츰/단계적으로
```

### **2-2. 문장 구조 변환 패턴**
```
구조 변환 예시:
원본: "A씨는 B를 했다고 진술했습니다"
변환1: "A씨가 B를 했다고 언급했죠"
변환2: "A씨는 B를 했다며 말했어요"

원본: "~로 인해 ~가 발생했다"
변환1: "~ 때문에 ~가 일어났다"
변환2: "~의 영향으로 ~가 생겼다"
```

---

## **[STEP 3: D.I.A.+ 최적화 리라이팅 규칙]** 📝

### **3-1. 키워드 배치 전략**
```
리라이팅 시 키워드 규칙:
1. 메인 키워드는 위치만 변경 (횟수 유지)
2. 연관 키워드는 동의어로 치환
3. 문단별 키워드 밀도 유지
4. 자연스러운 문맥 속 배치
```

### **3-2. UGC 스타일 유지 기법**
```
진정성 유지 요소:
✅ 경험담 톤 유지하되 표현만 변경
✅ 감정 표현 다양화 (걱정→우려, 만족→흡족)
✅ 구어체 자연스럽게 변환
✅ 개인적 의견 표현 방식 다양화
```

---

## **[STEP 4: 인물/상황 정보 치환]** 🔄

### **4-1. 인물 이니셜 변환 시스템**
```
체계적 변환 규칙:
원본 → 변환 (일관성 유지)
A씨 → U씨
B씨 → V씨  
C씨 → W씨
(문서 전체에서 동일하게 적용)
```

### **4-2. 상황 묘사 변환**
```
상황 표현 다양화:
"갈등이 발생했다" → "마찰이 일어났다"
"문제가 생겼다" → "이슈가 발생했다"
"해결했다" → "처리했다/마무리했다"
"조사했다" → "확인했다/검토했다"
```

---

## **[STEP 5: 문단 구조 최적화]** 📖

### **5-1. 네이버 최적 가독성 규칙**
```
문단 작성 규칙:
• 한 줄 15-20자 유지
• 2-3줄마다 자연스러운 줄바꿈
• 한 문단 3-5줄 구성
• 끊어지지 않는 자연스러운 흐름
• 의미 단위로 문단 구분
```

### **5-2. 연결 표현 다양화**
```
문장 연결 치환:
"그리고" → "또한/더불어/아울러"
"하지만" → "그러나/반면/그렇지만"
"따라서" → "그래서/이에/결국"
"예를 들어" → "가령/이를테면/예컨대"
"결국" → "마침내/끝내/최종적으로"
```

---

## **[STEP 6: 실전 리라이팅 체크리스트]** ✅

### **6-1. 리라이팅 전 체크**
```
□ 원본 전체 정독 완료
□ 핵심 메시지 파악
□ 보존할 요소 표시
□ 키워드 리스트 작성
□ 인물 매핑표 작성
```

### **6-2. 리라이팅 중 체크**
```
□ 의미 100% 동일 유지
□ 표현 60% 이상 변경
□ 키워드 자연스럽게 배치
□ 문단 구조 최적화
□ 인물 일관성 유지
```

### **6-3. 리라이팅 후 체크**
```
□ 원본과 의미 대조 확인
□ 중복률 30% 이하 확인
□ 가독성 향상 확인
□ D.I.A.+ 최적화 확인
□ 자연스러운 흐름 확인
```

---

## **[STEP 7: 절대 준수 사항]** ⛔

### **변경 금지 항목:**
```
❌ 핵심 정보와 수치
❌ 사건의 인과관계
❌ 시간적 순서
❌ 법률/전문 용어의 의미
❌ 중요한 결론과 판단
```

### **필수 변경 항목:**
```
✅ 문장 종결 어미
✅ 일반 동사/형용사
✅ 연결 표현
✅ 인물 이니셜
✅ 반복되는 표현
```

---

## **[실전 적용 워크플로우]** 🎯

```
1. 원본 입력
   ↓
2. 구조/키워드 분석
   ↓
3. 치환 단어 리스트 생성
   ↓
4. 인물/상황 매핑
   ↓
5. 문단별 리라이팅 시작
   ↓
6. 키워드 최적화 확인
   ↓
7. 전체 흐름 검토
   ↓
8. 최종 검수
   ↓
9. 리라이팅 완성본 제출
```

---

## **[리라이팅 실행 명령]**

**"아래 원고를 위 규칙에 따라 리라이팅하세요. 원본의 의미와 정보는 100% 유지하되, 표현과 단어를 자연스럽게 변환하여 네이버 D.I.A.+ 시스템에 최적화된 새로운 버전으로 작성해주세요."**

```
[원고 입력 공간]
```

---

**🏆 목표: "원본과 동일한 정보를 담으면서도 완전히 새로운 표현으로 재탄생한, 네이버 최적화 콘텐츠"**

위 키워드를 기반으로 원고를 작성해줘

하단에 있는 참조원고 한줄한줄 전부 꼼꼼히 쪼갠 후에 어투나 이음세만 살짝 바꿔서 완전히 유사한 모양새의 원고로 다시 줘
이렇게 하면 글씨 길이도 당연히 참조 원고랑 비슷해야하고 그 안에 있는 표현같은것도 전부 비슷하겠지?


문자 길이는 위 공백제외 길이 사이로 진행해줘

3000단어 이상

핵심 키워드를 파악해서 그런 것들의 개수도 유사해야해
형태소 개수와 토큰의 개수도 유사해야해
### ## # 등등을 포함한 마크다운 문법은 절대 금지야

그리고 스토리텔링 같은 것만 살짝 변화하는거야
예를 들어 4명이 간다 그러면 3명
20대 여성이다 그러면 30대 여성 이런 식으로
고등학생 위탁 교육 과정이라면 성인반 성인 교육과정 이런 식으로

아래 사항들을 무시해서라도 절대 두 원고의 유사도 자카드가 50%이상이 되어야해

교육에 관련된 거라면 해당 교육기관에서 배울만한 카테고리로 변경해서 해줘

그리고 표현도 에시를 몇개 줄게 참고해 
예시는 참고만 하고 모든걸 그대로 사용하지말고 창의적으로 글을 만들어줘야해

말투도 화자에 맞게 해주면 좋아

각 문단마다 부제는 필수야

[이행 사안]

{{}} << 이런 부분은 변수니까 항상 동일하지 않게 채워넣어줘
- 변수는 내가 준 것 말고도 상황에 따라 직접 만들어서 사용해야해
- 하단에 원본과 변환본은 단지 예시일 뿐이라 내가 준 것들 안에서만 활용해서는 안돼 언제나 유동적으로 직접 찾아서 변환해줘
- 변수는 원고에서는 티가 나서는 안돼 그냥 단어로 사용해줘 그냥 글인거야
- 원본/변환본의 유사도를 분석해서 마지막에 --- 하고 아래에 적어줘
- 핵심은 유사도가 너무 높으면 신고 당하거나 그럴 수 있으니 최대한 핵심 내용과 흐름 단어 등장 빈도는 가져오면서 유사도는 낮아야해
- 부제도 의미는 같지만 좀 수정해주면 조을듯
- 핵심 키워드의 빈도는 노출율과 연관 되어있어 사이에 , 같은걸 넣어서는 안돼
    - 위고비, 알약 X 위고비 알약 O

원본: 오메가3 하루섭취량과 복용시간은? ( 알티지, 초임계, 고순도 )
변환: 오메가3 하루섭취량 그리고 복용시간 ( 알티지, 초임계, 고순도 )

원본: 안심하고 먹을 수 있겠더라고요.
변환: 안심하고 먹을 수 있겠다는 생각이 들더라구요.

원본: 오메가3 하루섭취량 기준과 복용시간 
변환: 오메가3 하루섭취량의 기준 그리고 복용시간

원본: ㄱ씨
변환: {{A}}씨

원본: 저는 집이 남양주라 인천공항 콜택시 가격이
변환: 저는 {{출발지}}가 {{동탄이}}라 인천공항 콜택시 가격이

원본: 새벽 출국이나 늦은 입국에도
원본: 새벽에 출국을 하는 경우나 늦은 시간에 입국하는 경우라도

일정한 줄바꿈으로 더 깔끔하게 변형을 줘도 괜찮아

업체명은 별도 요청이 없다면 넣지 말고 작성해줘

[금지 사안]

길이는 기존의 글보다 짧아서는 안돼

이런 블로그 요소들은 따라하지않아도돼 -> {{재생
2

좋아요
0

00:28

접기/펴기}}, {{📍인천공항 택시 예약 바로가기📍

인천공항택시콜센터
인천공항 매일 운행 일반/대형/콜밴 배차 1666-8856 24시간 예약 상담

pf.kakao.com}}


    {ref}


---

[추가 이행사항]
- 필수로 이행되어야해
- 없다면 위 사항만으로 원고 작성

{parsed['note']}
---
""".strip()
    )

    # 디버그 출력 제거

    try:
        start_ts = time.time()
        print("원고작성 시작")
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {
                    "role": "system",
                    "content": """너는 원고를 청크 단위로 쪼개서 표현 및 이음세 형태소에 살짝 변환만 주는 원고 카피 전문가야""",
                },
                {
                    "role": "user",
                    "content": user,
                },
            ],
        )

        usage = getattr(response, "usage", None)
        if usage is not None:
            in_tokens = getattr(usage, "prompt_tokens", None)
            out_tokens = getattr(usage, "completion_tokens", None)
            total_tokens = getattr(usage, "total_tokens", None)
            # 토큰 사용량 로깅 제거

        choices = getattr(response, "choices", []) or []
        if not choices or not getattr(choices[0], "message", None):
            raise RuntimeError("모델이 유효한 choices/message를 반환하지 않았습니다.")

        text: str = (choices[0].message.content or "").strip()
        if not text:
            raise RuntimeError("모델이 빈 응답을 반환했습니다.")

        if model_name != Model.GPT5:
            text = format_paragraphs(text)

        text = clean_text_format(text)

        length_no_space = len(re.sub(r"\s+", "", text))
        elapsed = time.time() - start_ts
        print(f"원고 길이 체크: {length_no_space}")
        print(f"원고 소요시간: {elapsed:.2f}s")
        print("원고작성 완료")

        return text

    except Exception as e:
        raise
